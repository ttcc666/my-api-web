{
  // ========================================
  // 基础日志配置 (仅用于非 Serilog 的日志提供程序)
  // ========================================
  "Logging": {
    "LogLevel": {
      "Default": "Information",           // 默认日志级别: Trace < Debug < Information < Warning < Error < Critical
      "Microsoft.AspNetCore": "Warning"   // ASP.NET Core 框架日志仅记录警告及以上级别
    }
  },

  // ========================================
  // 允许的主机配置
  // ========================================
  // "*" 表示允许所有主机名访问 (开发环境)
  // 生产环境建议设置为具体域名: "yourdomain.com;www.yourdomain.com"
  "AllowedHosts": "*",

  // ========================================
  // 数据库连接字符串
  // ========================================
  "ConnectionStrings": {
    // SQL Server 连接字符串
    // - Server: 数据库服务器地址 (localhost 表示本机)
    // - Database: 数据库名称
    // - Trusted_Connection=true: 使用 Windows 身份验证
    // - TrustServerCertificate=true: 信任服务器证书 (开发环境使用)
    //
    // 生产环境建议使用用户名密码方式:
    // "Server=your-server;Database=MyApiWebDb;User Id=sa;Password=YourPassword;TrustServerCertificate=true;Encrypt=true;"
    "DefaultConnection": "Server=localhost;Database=MyApiWebDb;Trusted_Connection=true;TrustServerCertificate=true;"
  },

  // ========================================
  // 数据库管理配置 (SqlSugar Code First)
  // ========================================
  "DatabaseSettings": {
    // 是否启用自动迁移 (自动创建数据库和表结构)
    // 开发环境: true  | 生产环境: false (手动执行迁移)
    "EnableMigrations": false,

    // 是否在应用启动时执行数据种子 (插入初始数据)
    // 开发环境: true  | 生产环境: false (避免重复插入)
    "EnableDataSeeding": false,

    // 是否强制每次启动时重新播种数据 (会删除并重新创建种子数据)
    // 开发环境调试用: true  | 其他情况: false (避免数据丢失)
    "ForceReseedOnStartup": false
  },

  // ========================================
  // JWT 身份认证配置
  // ========================================
  "JwtSettings": {
    // JWT 签名密钥 (必须至少 32 字符)
    // ⚠️ 生产环境必须通过环境变量或密钥管理服务 (如 Azure Key Vault) 设置
    // 环境变量示例: JwtSettings__Secret
    "Secret": "A_VERY_LONG_AND_SECURE_SECRET_KEY_REPLACE_IT_LATER_!@#$%",

    // JWT 签发者 (通常为应用名称或域名)
    "Issuer": "MyApiWeb",

    // JWT 受众 (令牌的目标接收者,通常为客户端应用标识)
    "Audience": "MyApiWeb.Client",

    // Access Token 有效期 (分钟)
    // 建议: 开发环境 30-60 分钟 | 生产环境 15-30 分钟
    "AccessTokenExpirationMinutes": 30,

    // Refresh Token 有效期 (天)
    // 建议: 7-30 天 (根据安全需求调整)
    "RefreshTokenExpirationDays": 7
  },

  // ========================================
  // CORS 跨域资源共享配置
  // ========================================
  "CorsSettings": {
    // 允许访问 API 的前端域名白名单
    // 开发环境通过 Program.cs 中的条件判断自动允许 localhost
    // 生产环境必须明确列出所有合法的前端域名
    "AllowedOrigins": [
      "https://yourdomain.com",           // 主域名
      "https://www.yourdomain.com",       // WWW 子域名
      "https://admin.yourdomain.com"      // 管理后台子域名
    ]
  },

  // ========================================
  // CAP 消息总线配置
  // ========================================
  "CAP": {
    // 存储类型: InMemory, SqlServer, MySql, PostgreSql, MongoDB
    // InMemory: 内存存储,适合开发和测试环境
    "StorageType": "InMemory",
    
    // 传输类型: InMemory, RabbitMQ, Kafka, AzureServiceBus, NATS, Redis
    // InMemory: 内存传输,适合开发和测试环境,无需外部依赖
    "TransportType": "InMemory",
    
    // 失败重试次数
    "FailedRetryCount": 3,
    
    // 失败重试间隔(秒)
    "FailedRetryInterval": 60,
    
    // 消费者线程数
    "ConsumerThreadCount": 1,
    
    // 存储配置
    "Storage": {
      "Schema": "cap",
      "TablePrefix": "cap",
      "DatabaseName": "cap",
      "PublishedCollection": "published",
      "ReceivedCollection": "received"
    },
    
    // 传输配置
    "Transport": {
      // RabbitMQ 配置
      "HostName": "localhost",
      "Port": 5672,
      "UserName": "guest",
      "Password": "guest",
      "VirtualHost": "/",
      "ExchangeName": "cap.default.router",
      
      // Kafka 配置 (需要安装 DotNetCore.CAP.Kafka)
      // "Servers": "localhost:9092",
      // "ConnectionPoolSize": 10,
      
      // Azure Service Bus 配置 (需要安装 DotNetCore.CAP.AzureServiceBus)
      // "ConnectionString": "Endpoint=sb://xxx.servicebus.windows.net/;SharedAccessKeyName=xxx;SharedAccessKey=xxx",
      // "TopicPath": "cap",
      
      // Amazon SQS 配置 (需要安装 DotNetCore.CAP.AmazonSQS)
      // "Region": "us-east-1",
      // "AccessKey": "your-access-key",
      // "SecretKey": "your-secret-key",
      
      // Redis 配置 (需要安装 DotNetCore.CAP.RedisStreams)
      // "Configuration": "localhost:6379",
      // "StreamEntriesCount": 10
    }
  },

  // ========================================
  // Serilog 结构化日志配置
  // ========================================
  "Serilog": {
    // 最小日志级别配置
    "MinimumLevel": {
      // 全局默认日志级别
      "Default": "Information",

      // 针对特定命名空间的日志级别覆盖
      "Override": {
        "Microsoft": "Warning",                     // Microsoft 框架日志仅记录警告及以上
        "Microsoft.Hosting.Lifetime": "Information", // 应用启动/关闭信息保留
        "System": "Warning"                         // System 命名空间日志仅记录警告及以上
      }
    },

    // 日志输出目标配置 (支持多个输出)
    "WriteTo": [
      // 1. 控制台输出 (开发环境友好)
      {
        "Name": "Console",
        "Args": {
          // 控制台输出格式模板
          // {Timestamp}: 时间戳 | {Level}: 日志级别 | {SourceContext}: 日志来源类
          // {Message}: 日志消息 | {Exception}: 异常堆栈
          "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz}] [{Level:u3}] [{SourceContext}] {Message:lj}{NewLine}{Exception}"
        }
      },

      // 2. 文件输出 (持久化存储)
      {
        "Name": "File",
        "Args": {
          // 日志文件路径 (自动追加日期: app-20250114.log)
          "path": "logs/app-.log",

          // 日志滚动策略: Day (每天), Hour (每小时), Month (每月)
          "rollingInterval": "Day",

          // 保留的日志文件数量 (超过会自动删除旧文件)
          "retainedFileCountLimit": 30,

          // 单个日志文件大小限制 (字节) - 10MB = 10 * 1024 * 1024
          "fileSizeLimitBytes": 10485760,

          // 是否在文件超过大小限制时自动创建新文件
          "rollOnFileSizeLimit": true,

          // 文件输出格式模板 (比控制台多了 RequestId 用于追踪请求)
          "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz}] [{Level:u3}] [{SourceContext}] [{RequestId}] {Message:lj}{NewLine}{Exception}"
        }
      }
    ],

    // 日志上下文增强器 (自动附加额外信息)
    "Enrich": [
      "FromLogContext",         // 从日志上下文中提取属性
      "WithEnvironmentName",    // 附加环境名称 (Development/Staging/Production)
      "WithMachineName",        // 附加机器名称 (多服务器部署时有用)
      "WithProcessId",          // 附加进程 ID
      "WithThreadId"            // 附加线程 ID (诊断并发问题)
    ]
  }
}
